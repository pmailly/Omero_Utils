/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import ij.IJ;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import omero.gateway.model.ProjectData;
import omero.gateway.model.DatasetData;
import omero.gateway.model.ExperimenterData;
import omero.gateway.model.ImageData;
import omero.gateway.model.ProjectData;


/**
 *
 * @author phm
 */
public class JDialogOmeroConnect extends javax.swing.JDialog { 
    
    public static String serverName = "omero.college-de-france.fr";
    public static int serverPort = 4064;
    public static  String userID = "";
    public static String userPass = "";
    private ArrayList<ProjectData> projects = new ArrayList<>();
    private ArrayList<DatasetData> datasets = new ArrayList<>();
    
    // parameters
    
    public static ProjectData selectedProjectData;
    public static DatasetData selectedDatasetData;
    public static ArrayList<ImageData> imageData;
    public static String selectedProject;
    public static String selectedDataset;
    public static boolean connectSuccess = false;
    public static boolean localImages = false;
    public static String imagesFolder;
    public static boolean dialogCancel = false;
    private boolean connectOK = false;
    
    /**
     * Creates new form SegmentationJDialog
     */
    public JDialogOmeroConnect(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    //System.out.println(info.getName()+" ");
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogOmeroConnect.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        initComponents();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jButtonOk = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jTabbedOmero = new javax.swing.JTabbedPane();
        jPanelOmero = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldServerName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldPort = new javax.swing.JTextField();
        jTextFieldUserID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        jButtonConnect = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jComboBoxProjects = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxDatasets = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaImages = new javax.swing.JTextArea();
        jPanelLocal = new javax.swing.JPanel();
        jFileChooser = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Images selection");
        setForeground(new java.awt.Color(51, 51, 51));
        setModal(true);

        jButtonOk.setForeground(java.awt.Color.black);
        jButtonOk.setText("Ok");
        jButtonOk.setEnabled(false);
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonCancel.setForeground(java.awt.Color.black);
        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jTabbedOmero.setForeground(java.awt.Color.lightGray);

        jLabel1.setText("Server name : ");

        jTextFieldServerName.setText(serverName);
        jTextFieldServerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldServerNameActionPerformed(evt);
            }
        });
        jTextFieldServerName.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextFieldServerNamePropertyChange(evt);
            }
        });

        jLabel7.setText("Port : ");

        jTextFieldPort.setText(String.valueOf(serverPort));
        jTextFieldPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPortActionPerformed(evt);
            }
        });
        jTextFieldPort.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextFieldPortPropertyChange(evt);
            }
        });

        jTextFieldUserID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldUserIDFocusLost(evt);
            }
        });
        jTextFieldUserID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUserIDActionPerformed(evt);
            }
        });

        jLabel2.setText("user ID : ");

        jLabel3.setText("Password : ");

        jPasswordField.setText("");
        jPasswordField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPasswordFieldFocusLost(evt);
            }
        });
        jPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordFieldActionPerformed(evt);
            }
        });

        jButtonConnect.setText("Connect");
        jButtonConnect.setEnabled(false);
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jLabel8.setText("OMERO Database");

        jComboBoxProjects.setEnabled(false);
        jComboBoxProjects.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProjectsActionPerformed(evt);
            }
        });

        jLabel4.setText("Projects : ");

        jLabel5.setText("Datasets : ");

        jComboBoxDatasets.setEnabled(false);
        jComboBoxDatasets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDatasetsActionPerformed(evt);
            }
        });

        jLabel6.setText("Images :");

        jTextAreaImages.setEditable(false);
        jTextAreaImages.setColumns(20);
        jTextAreaImages.setLineWrap(true);
        jTextAreaImages.setRows(5);
        jScrollPane1.setViewportView(jTextAreaImages);

        javax.swing.GroupLayout jPanelOmeroLayout = new javax.swing.GroupLayout(jPanelOmero);
        jPanelOmero.setLayout(jPanelOmeroLayout);
        jPanelOmeroLayout.setHorizontalGroup(
            jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOmeroLayout.createSequentialGroup()
                .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOmeroLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel3)
                        .addGap(282, 282, 282)
                        .addComponent(jButtonConnect))
                    .addGroup(jPanelOmeroLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jComboBoxProjects, javax.swing.GroupLayout.Alignment.LEADING, 0, 327, Short.MAX_VALUE)
                            .addComponent(jComboBoxDatasets, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanelOmeroLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelOmeroLayout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(jLabel8))
                    .addGroup(jPanelOmeroLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldServerName, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelOmeroLayout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanelOmeroLayout.setVerticalGroup(
            jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelOmeroLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOmeroLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE))
                    .addComponent(jTextFieldServerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOmeroLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE))
                    .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOmeroLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE))
                    .addComponent(jTextFieldUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelOmeroLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jButtonConnect))
                    .addGroup(jPanelOmeroLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jPasswordField)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(26, 26, 26)
                .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxProjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelOmeroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBoxDatasets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        jTabbedOmero.addTab("Images on Omero server", jPanelOmero);

        jFileChooser.setCurrentDirectory(new java.io.File("/home/phm/~"));
        jFileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        jFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLocalLayout = new javax.swing.GroupLayout(jPanelLocal);
        jPanelLocal.setLayout(jPanelLocalLayout);
        jPanelLocalLayout.setHorizontalGroup(
            jPanelLocalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLocalLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelLocalLayout.setVerticalGroup(
            jPanelLocalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelLocalLayout.createSequentialGroup()
                .addGap(0, 44, Short.MAX_VALUE)
                .addComponent(jFileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedOmero.addTab("Images on local machine", jPanelLocal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonOk, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedOmero)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedOmero)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOk)
                    .addComponent(jButtonCancel))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        this.dispose();
        dialogCancel = false;
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.dispose();
        if (connectOK)
            OmeroConnect.disconnect();
        dialogCancel = true;
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooserActionPerformed
        // TODO add your handling code here:
        localImages = true;
        imagesFolder = jFileChooser.getSelectedFile().getAbsolutePath();
        jButtonOk.setEnabled(true);
    }//GEN-LAST:event_jFileChooserActionPerformed

    private void jComboBoxDatasetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDatasetsActionPerformed
        // TODO add your handling code here:

        try {
            if (jComboBoxDatasets.getItemCount() > 0) {
                selectedDataset = jComboBoxDatasets.getSelectedItem().toString();
                selectedDatasetData = OmeroConnect.findDataset(selectedDataset, selectedProjectData, true);
                imageData = OmeroConnect.findAllImages(selectedDatasetData);
                if (imageData.isEmpty())
                    IJ.showMessage("Error", "No image found in dataset " + selectedDataset);
                else {
                    IJ.showStatus(imageData.size() + " images found in datatset " + selectedDataset);
                    jTextAreaImages.setText("");
                    for(ImageData images : imageData)
                    jTextAreaImages.append(images.getName()+"\n");
                    jButtonOk.setEnabled(true);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(JDialogOmeroConnect.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBoxDatasetsActionPerformed

    private void jComboBoxProjectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProjectsActionPerformed
        try {
            // TODO add your handling code here:
            if (jComboBoxProjects.getItemCount() > 0) {
                selectedProject = jComboBoxProjects.getSelectedItem().toString();
                selectedProjectData = OmeroConnect.findProject(selectedProject, true);
                datasets = OmeroConnect.findDatasets(selectedProjectData);
                if (datasets.isEmpty()) {
//                    IJ.showMessage("Error", "No dataset found for project " + selectedProject);
                    jComboBoxDatasets.removeAllItems();
                    jTextAreaImages.setText("");
                }
                else {
                    if (jComboBoxDatasets.getItemCount() > 0) {
                        jComboBoxDatasets.removeAllItems();
                        jTextAreaImages.setText("");
                    }
                    for (DatasetData datasetData : datasets)
                        jComboBoxDatasets.addItem(datasetData.getName());
                    jComboBoxDatasets.setEnabled(true);
                    jComboBoxDatasets.setSelectedIndex(0);
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(JDialogOmeroConnect.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBoxProjectsActionPerformed

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        // TODO add your handling code here:
        if (serverName.isEmpty() && serverPort == 0 && userID.isEmpty() && userPass.isEmpty()) {
            IJ.showMessage("Error", "Missing parameter(s) to connect to server !!!");            
        }
        else {
            try {
                OmeroConnect connect = new OmeroConnect();
                connectOK = connect.connect(serverName, serverPort, userID, userPass);
            } catch (Exception ex) {
                //Logger.getLogger(JDialogOmeroConnect.class.getName()).log(Level.SEVERE, null, ex);
                IJ.showMessage("Error", "Wrong user / password !!!");
            }
            if (connectOK) {
                jButtonConnect.setEnabled(false);
                try {
                    projects = OmeroConnect.findUserProjects(OmeroConnect.getUserId(userID));
                    if (projects.isEmpty())
                    IJ.showMessage("Error", "No project found for user " + userID);
                    else {
                        if (jComboBoxProjects.getItemCount() > 0)
                        jComboBoxProjects.removeAllItems();
                        for (ProjectData projectData : projects) {
                            jComboBoxProjects.addItem(projectData.getName());
                        }
                        jComboBoxProjects.setEnabled(true);
                        jComboBoxProjects.setSelectedIndex(0);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(JDialogOmeroConnect.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void jTextFieldPortPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextFieldPortPropertyChange
        // TODO add your handling code here:
        serverPort = Integer.parseInt(jTextFieldPort.getText());
       if (!serverName.isEmpty() && serverPort != 0 && !userID.isEmpty() && !userPass.isEmpty())
            jButtonConnect.setEnabled(true);
    }//GEN-LAST:event_jTextFieldPortPropertyChange

    private void jTextFieldPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPortActionPerformed
        // TODO add your handling code here:
        serverPort = Integer.parseInt(jTextFieldPort.getText());
        if (!serverName.isEmpty() && serverPort != 0 && !userID.isEmpty() && !userPass.isEmpty())
            jButtonConnect.setEnabled(true);
    }//GEN-LAST:event_jTextFieldPortActionPerformed

    private void jTextFieldServerNamePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextFieldServerNamePropertyChange
        // TODO add your handling code here:
        serverName = jTextFieldServerName.getText();
        if (!serverName.isEmpty() && serverPort != 0 && !userID.isEmpty() && !userPass.isEmpty())
            jButtonConnect.setEnabled(true);
    }//GEN-LAST:event_jTextFieldServerNamePropertyChange

    private void jTextFieldServerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldServerNameActionPerformed
        // TODO add your handling code here:
        serverName = jTextFieldServerName.getText();
        if (!serverName.isEmpty() && serverPort != 0 && !userID.isEmpty() && !userPass.isEmpty())
            jButtonConnect.setEnabled(true);
    }//GEN-LAST:event_jTextFieldServerNameActionPerformed

    private void jTextFieldUserIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUserIDActionPerformed
        // TODO add your handling code here:
       userID = jTextFieldUserID.getText();
       if (!serverName.isEmpty() && serverPort != 0 && !userID.isEmpty() && !userPass.isEmpty())
            jButtonConnect.setEnabled(true);
    }//GEN-LAST:event_jTextFieldUserIDActionPerformed

    private void jPasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordFieldActionPerformed
        // TODO add your handling code here:
        userPass = new String(jPasswordField.getPassword());
        if (!serverName.isEmpty() && serverPort != 0 && !userID.isEmpty() && !userPass.isEmpty())
            jButtonConnect.setEnabled(true);
    }//GEN-LAST:event_jPasswordFieldActionPerformed

    private void jTextFieldUserIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUserIDFocusLost
        // TODO add your handling code here:
        userID = jTextFieldUserID.getText();
       if (!serverName.isEmpty() && serverPort != 0 && !userID.isEmpty() && !userPass.isEmpty())
            jButtonConnect.setEnabled(true);
    }//GEN-LAST:event_jTextFieldUserIDFocusLost

    private void jPasswordFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPasswordFieldFocusLost
        // TODO add your handling code here:
        userPass = new String(jPasswordField.getPassword());
        if (!serverName.isEmpty() && serverPort != 0 && !userID.isEmpty() && !userPass.isEmpty())
            jButtonConnect.setEnabled(true);
    }//GEN-LAST:event_jPasswordFieldFocusLost

    /**
     * @param args the command line arguments
     */
//    public void main() {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SegmentationJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SegmentationJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SegmentationJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SegmentationJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the dialog */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                SegmentationJDialog dialog = new SegmentationJDialog(new javax.swing.JFrame(), true);
//                dialog.setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JComboBox<String> jComboBoxDatasets;
    private javax.swing.JComboBox<String> jComboBoxProjects;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanelLocal;
    private javax.swing.JPanel jPanelOmero;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedOmero;
    private javax.swing.JTextArea jTextAreaImages;
    private javax.swing.JTextField jTextFieldPort;
    private javax.swing.JTextField jTextFieldServerName;
    private javax.swing.JTextField jTextFieldUserID;
    // End of variables declaration//GEN-END:variables
}
